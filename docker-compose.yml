version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tactical-postgres
    environment:
      POSTGRES_DB: tactical_db
      POSTGRES_USER: tactical_user
      POSTGRES_PASSWORD: tactical_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - tactical-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tactical_user -d tactical_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tactical-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - tactical-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Tactical Command Hub Application
  tactical-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tactical-command-hub
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/tactical_db
      SPRING_DATASOURCE_USERNAME: tactical_user
      SPRING_DATASOURCE_PASSWORD: tactical_pass
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      TACTICAL_JWT_SECRET: TacticalCommandHubDockerSecretKey2024!@#$%^&*()
      JAVA_OPTS: "-Xmx1g -Xms512m"
    ports:
      - "8080:8080"
      - "8443:8443"
    volumes:
      - app_logs:/app/logs
      - ./docker/app/config:/app/config
    networks:
      - tactical-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tactical-nginx
    depends_on:
      - tactical-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - tactical-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tactical-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - tactical-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: tactical-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - tactical-network

volumes:
  postgres_data:
  redis_data:
  app_logs:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  tactical-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
